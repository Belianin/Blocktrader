using System;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using Blocktrader.Domain;

namespace Blocktrader
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
//        private readonly BinanceExchange binance;
//
//        private readonly BitfinexExchange bitfinex;
//
//        private readonly BitstampExchange bitstamp;
        
        private Timestamp[] timestamps;

        private FilterSettings filterSettings = new FilterSettings();
        
        public MainWindow()
        {
            InitializeComponent();
//            binance = new BinanceExchange();
//            bitfinex = new BitfinexExchange();
//            bitstamp = new BitstampExchange();

            TicketPicker.ItemsSource = new[]
           {
                Ticket.BtcUsd,
                Ticket.EthUsd,
                Ticket.EthBtc,
                Ticket.XrpUsd,
                Ticket.XrpBtc
            };
            //Thread.Sleep(TimeSpan.FromSeconds(15));
            DatePicker.SelectedDate = DateTime.Now;
            PrecPicker.Value = 0;
            Update();


        }
        public void Filter(object sender, RoutedEventArgs routedEventArgs)
        {
            if (float.TryParse(OrderSizeInput.Text, out var value))
            {
                filterSettings.MinSize = value;
                Update();
            }

            OrderSizeInput.Text = filterSettings.MinSize.ToString(CultureInfo.CurrentCulture);
        }
        private bool IsOk(Order order)
        {
            return order.Amount >= filterSettings.MinSize;
        }

        private void TicketPicker_OnSelected(object sender, RoutedEventArgs e)
        {
//            var ticket = (Ticket)TicketPicker.SelectedItem;
//            binance.Ticket = ticket;
//            bitfinex.Ticket = ticket;
//            bitstamp.Ticket = ticket;
//            Update();

        }

        private string GetFileName(string exchange, Ticket ticket, DateTime dateTime)   
        {
            return $"Data/{exchange}/{exchange}_{ticket}_{dateTime.ToString("MMM_yyyy", new CultureInfo("en_US"))}";
        }
        private void DatePicker_OnSelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            Update();
        }

        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var grid = (DataGrid)sender;
            foreach (var item in grid.Columns)
            {
                if (item.Header.ToString() == "Count")
                {
                    item.DisplayIndex = grid.Columns.Count - 1;
                    break;
                }
            }
        }
        private void Update()
        {
//            var dateTime = DatePicker.SelectedDate;
//            if (dateTime == null)
//                return;
//
//            var filename = GetFileName("Bitstamp", bitstamp.Ticket, dateTime.Value);
//            if (!File.Exists(filename))
//                return;
//            
//            var rawData = File.ReadAllBytes(filename);
//            timestamps = Timestamp.FromBytes(rawData)
//                .Where(d => d.Date.Day == dateTime.Value.Day)
//                .ToArray();
//
//            TimePicker.Maximum = timestamps.Count();
//            TimePicker.TickFrequency = 1;
//            TimePicker.TickPlacement = TickPlacement.BottomRight;
//
//            if (timestamps == null)
//                return;
//            
//            var index = (int)TimePicker.Value;
//            if (index < 0 || index >= timestamps.Length - 1)
//                return;
//            
//            var timestamp = timestamps[index];
//            var p = Convert.ToInt32(PrecPicker.Value) - 1;
//
//            BitstampBidsGrid.ItemsSource = timestamp.Bids.Where(IsOk).OrderByDescending(b => b.Price).Flat(p, true);
//            BitstampAsksGrid.ItemsSource = timestamp.Asks.Where(IsOk).OrderBy(p => p.Price).Flat(p, false);
//
//            filename = GetFileName("Bitfinex", bitfinex.Ticket, dateTime.Value);
//            rawData = File.ReadAllBytes(filename);
//            timestamps = Timestamp.FromBytes(rawData)
//                .Where(d => d.Date.Day == dateTime.Value.Day)
//                .ToArray();
//            timestamp = timestamps[index];
//
//            BitfinexBidsGrid.ItemsSource = timestamp.Bids.Where(IsOk).OrderByDescending(b => b.Price).Flat(p, true);
//            BitfinexAsksGrid.ItemsSource = timestamp.Asks.Where(IsOk).OrderBy(p => p.Price).Flat(p, false);
//
//            filename = GetFileName("Binance", binance.Ticket, dateTime.Value);
//            rawData = File.ReadAllBytes(filename);
//            timestamps = Timestamp.FromBytes(rawData)
//                .Where(d => d.Date.Day == dateTime.Value.Day)
//                .ToArray();
//            timestamp = timestamps[index];
//
//            BinanceBidsGrid.ItemsSource = timestamp.Bids.Where(IsOk).OrderByDescending(b => b.Price).Flat(p, true);
//            BinanceAsksGrid.ItemsSource = timestamp.Asks.Where(IsOk).OrderBy(p => p.Price).Flat(p, false);
            
        }

        private void PrecPickerChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
           Update();

        }

        private void TimePickerChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            Update();

        }
    }
}