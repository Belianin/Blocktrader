using System;
using System.Globalization;
using System.Linq;
using System.Timers;
using System.Windows;
using System.Windows.Controls;
using Blocktrader.Domain;
using Blocktrader.Service;
using Blocktrader.Service.Files;
using Blocktrader.Utils.Logging;

namespace Blocktrader
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly TimeSpan updateInterval = TimeSpan.FromSeconds(30);
        
        private readonly BlocktraderService service;

        private readonly ITimestampManager timestampManager = new TimestampFileManager();

        private FilterSettings filterSettings = new FilterSettings();

        private Ticket currentTicket = Ticket.BtcUsd;
        private DateTime selectedDate = DateTime.Now;
        private int currentTick = 0;
        private MonthTimestamp selectedTimestamp;
        
        public MainWindow()
        {
            try
            {

                InitializeComponent();
                var log = new ConsoleLog();
                service = new BlocktraderService(log);
            
                TicketPicker.ItemsSource = new[]
                {
                    Ticket.BtcUsd,
                    Ticket.EthUsd,
                    Ticket.EthBtc,
                    Ticket.XrpUsd,
                    Ticket.XrpBtc
                };
                DatePicker.SelectedDate = DateTime.Now;
                PrecPicker.Value = 0;

                var timer = new Timer(updateInterval.TotalMilliseconds) {AutoReset = true};
                timer.Elapsed += (s, e) => Download();
                timer.Start();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }

        private void Download()
        {
            var timestamp = service.GetCurrentTimestampAsync().Result;
            timestampManager.WriteAsync(timestamp).Wait();

        }

        private void Filter(object sender, RoutedEventArgs routedEventArgs)
        {
            if (float.TryParse(OrderSizeInput.Text, out var value))
            {
                filterSettings.MinSize = value;
            }

            OrderSizeInput.Text = filterSettings.MinSize.ToString(CultureInfo.CurrentCulture);
            Update();
        }
        
        private bool IsOk(Order order)
        {
            return order.Amount >= filterSettings.MinSize;
        }

        private void TicketPicker_OnSelected(object sender, RoutedEventArgs e)
        {
            currentTicket = (Ticket) TicketPicker.SelectedItem;

        }
        
        private void DatePicker_OnSelectedDateChanged(object sender, SelectionChangedEventArgs e)
        {
            if (DatePicker.SelectedDate != null)
                selectedDate = DatePicker.SelectedDate.Value;
        }

        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
//            var grid = (DataGrid)sender;
//            foreach (var item in grid.Columns)
//            {
//                if (item.Header.ToString() == "Count")
//                {
//                    item.DisplayIndex = grid.Columns.Count - 1;
//                    break;
//                }
//            }
        }
        private void Update()
        {
            selectedTimestamp = timestampManager.ReadTimestampsFromMonth(selectedDate, currentTicket);
            
            var currentDayTimestamp = selectedTimestamp.Info.Where(i => i.Key.Day == selectedDate.Day).Select(v => v.Value).ToArray();
            var prec = 1;
            BitstampBidsGrid.ItemsSource = currentDayTimestamp[currentTick][ExchangeTitle.Binance].OrderBook.Bids.Where(IsOk).OrderByDescending(b => b.Price).Flat(prec, true);
            BitstampAsksGrid.ItemsSource = currentDayTimestamp[currentTick][ExchangeTitle.Binance].OrderBook.Asks.Where(IsOk).OrderBy(p => p.Price).Flat(prec, false);
            BitfinexBidsGrid.ItemsSource = currentDayTimestamp[currentTick][ExchangeTitle.Bitfinex].OrderBook.Bids.Where(IsOk).OrderByDescending(b => b.Price).Flat(prec, true);
            BitfinexAsksGrid.ItemsSource = currentDayTimestamp[currentTick][ExchangeTitle.Bitfinex].OrderBook.Asks.Where(IsOk).OrderBy(p => p.Price).Flat(prec, false);
            BinanceBidsGrid.ItemsSource = currentDayTimestamp[currentTick][ExchangeTitle.Bitstamp].OrderBook.Bids.Where(IsOk).OrderByDescending(b => b.Price).Flat(prec, true);
            BinanceAsksGrid.ItemsSource = currentDayTimestamp[currentTick][ExchangeTitle.Bitstamp].OrderBook.Asks.Where(IsOk).OrderBy(p => p.Price).Flat(prec, false);
            
            InvalidateVisual();
        }

        private void PrecPickerChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

        }

        private void TimePickerChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            currentTick = (int) TimePicker.Value;
        }
    }
}